// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hostinput.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hostinput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hostinput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hostinput_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hostinput_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace HostBuffers {
class EchoAck;
class EchoAckDefaultTypeInternal;
extern EchoAckDefaultTypeInternal _EchoAck_default_instance_;
class HostBytes;
class HostBytesDefaultTypeInternal;
extern HostBytesDefaultTypeInternal _HostBytes_default_instance_;
class HostMessage;
class HostMessageDefaultTypeInternal;
extern HostMessageDefaultTypeInternal _HostMessage_default_instance_;
class Instruction;
class InstructionDefaultTypeInternal;
extern InstructionDefaultTypeInternal _Instruction_default_instance_;
class ResizeMessage;
class ResizeMessageDefaultTypeInternal;
extern ResizeMessageDefaultTypeInternal _ResizeMessage_default_instance_;
}  // namespace HostBuffers
PROTOBUF_NAMESPACE_OPEN
template<> ::HostBuffers::EchoAck* Arena::CreateMaybeMessage<::HostBuffers::EchoAck>(Arena*);
template<> ::HostBuffers::HostBytes* Arena::CreateMaybeMessage<::HostBuffers::HostBytes>(Arena*);
template<> ::HostBuffers::HostMessage* Arena::CreateMaybeMessage<::HostBuffers::HostMessage>(Arena*);
template<> ::HostBuffers::Instruction* Arena::CreateMaybeMessage<::HostBuffers::Instruction>(Arena*);
template<> ::HostBuffers::ResizeMessage* Arena::CreateMaybeMessage<::HostBuffers::ResizeMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace HostBuffers {

// ===================================================================

class HostMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:HostBuffers.HostMessage) */ {
 public:
  HostMessage();
  virtual ~HostMessage();

  HostMessage(const HostMessage& from);
  HostMessage(HostMessage&& from) noexcept
    : HostMessage() {
    *this = ::std::move(from);
  }

  inline HostMessage& operator=(const HostMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostMessage& operator=(HostMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HostMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostMessage* internal_default_instance() {
    return reinterpret_cast<const HostMessage*>(
               &_HostMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HostMessage* other);
  friend void swap(HostMessage& a, HostMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HostMessage* New() const final {
    return CreateMaybeMessage<HostMessage>(nullptr);
  }

  HostMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const HostMessage& from);
  void MergeFrom(const HostMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HostMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HostBuffers.HostMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HostBuffers.Instruction instruction = 1;
  int instruction_size() const;
  void clear_instruction();
  static const int kInstructionFieldNumber = 1;
  ::HostBuffers::Instruction* mutable_instruction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HostBuffers::Instruction >*
      mutable_instruction();
  const ::HostBuffers::Instruction& instruction(int index) const;
  ::HostBuffers::Instruction* add_instruction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HostBuffers::Instruction >&
      instruction() const;

  // @@protoc_insertion_point(class_scope:HostBuffers.HostMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HostBuffers::Instruction > instruction_;
  friend struct ::TableStruct_hostinput_2eproto;
};
// -------------------------------------------------------------------

class Instruction final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:HostBuffers.Instruction) */ {
 public:
  Instruction();
  virtual ~Instruction();

  Instruction(const Instruction& from);
  Instruction(Instruction&& from) noexcept
    : Instruction() {
    *this = ::std::move(from);
  }

  inline Instruction& operator=(const Instruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Instruction& operator=(Instruction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Instruction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Instruction* internal_default_instance() {
    return reinterpret_cast<const Instruction*>(
               &_Instruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Instruction* other);
  friend void swap(Instruction& a, Instruction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Instruction* New() const final {
    return CreateMaybeMessage<Instruction>(nullptr);
  }

  Instruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Instruction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Instruction& from);
  void MergeFrom(const Instruction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Instruction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HostBuffers.Instruction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Instruction)
  // @@protoc_insertion_point(class_scope:HostBuffers.Instruction)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hostinput_2eproto;
};
// -------------------------------------------------------------------

class HostBytes final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:HostBuffers.HostBytes) */ {
 public:
  HostBytes();
  virtual ~HostBytes();

  HostBytes(const HostBytes& from);
  HostBytes(HostBytes&& from) noexcept
    : HostBytes() {
    *this = ::std::move(from);
  }

  inline HostBytes& operator=(const HostBytes& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostBytes& operator=(HostBytes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HostBytes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostBytes* internal_default_instance() {
    return reinterpret_cast<const HostBytes*>(
               &_HostBytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(HostBytes* other);
  friend void swap(HostBytes& a, HostBytes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HostBytes* New() const final {
    return CreateMaybeMessage<HostBytes>(nullptr);
  }

  HostBytes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostBytes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const HostBytes& from);
  void MergeFrom(const HostBytes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HostBytes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HostBuffers.HostBytes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes hoststring = 4;
  bool has_hoststring() const;
  void clear_hoststring();
  static const int kHoststringFieldNumber = 4;
  const std::string& hoststring() const;
  void set_hoststring(const std::string& value);
  void set_hoststring(std::string&& value);
  void set_hoststring(const char* value);
  void set_hoststring(const void* value, size_t size);
  std::string* mutable_hoststring();
  std::string* release_hoststring();
  void set_allocated_hoststring(std::string* hoststring);

  // @@protoc_insertion_point(class_scope:HostBuffers.HostBytes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hoststring_;
  friend struct ::TableStruct_hostinput_2eproto;
};
// -------------------------------------------------------------------

class ResizeMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:HostBuffers.ResizeMessage) */ {
 public:
  ResizeMessage();
  virtual ~ResizeMessage();

  ResizeMessage(const ResizeMessage& from);
  ResizeMessage(ResizeMessage&& from) noexcept
    : ResizeMessage() {
    *this = ::std::move(from);
  }

  inline ResizeMessage& operator=(const ResizeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResizeMessage& operator=(ResizeMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ResizeMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResizeMessage* internal_default_instance() {
    return reinterpret_cast<const ResizeMessage*>(
               &_ResizeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ResizeMessage* other);
  friend void swap(ResizeMessage& a, ResizeMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResizeMessage* New() const final {
    return CreateMaybeMessage<ResizeMessage>(nullptr);
  }

  ResizeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResizeMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ResizeMessage& from);
  void MergeFrom(const ResizeMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResizeMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HostBuffers.ResizeMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 width = 5;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 height = 6;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:HostBuffers.ResizeMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  friend struct ::TableStruct_hostinput_2eproto;
};
// -------------------------------------------------------------------

class EchoAck final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:HostBuffers.EchoAck) */ {
 public:
  EchoAck();
  virtual ~EchoAck();

  EchoAck(const EchoAck& from);
  EchoAck(EchoAck&& from) noexcept
    : EchoAck() {
    *this = ::std::move(from);
  }

  inline EchoAck& operator=(const EchoAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoAck& operator=(EchoAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EchoAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoAck* internal_default_instance() {
    return reinterpret_cast<const EchoAck*>(
               &_EchoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(EchoAck* other);
  friend void swap(EchoAck& a, EchoAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EchoAck* New() const final {
    return CreateMaybeMessage<EchoAck>(nullptr);
  }

  EchoAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EchoAck& from);
  void MergeFrom(const EchoAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EchoAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HostBuffers.EchoAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 echo_ack_num = 8;
  bool has_echo_ack_num() const;
  void clear_echo_ack_num();
  static const int kEchoAckNumFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 echo_ack_num() const;
  void set_echo_ack_num(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:HostBuffers.EchoAck)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 echo_ack_num_;
  friend struct ::TableStruct_hostinput_2eproto;
};
// ===================================================================

static const int kHostbytesFieldNumber = 2;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::HostBuffers::Instruction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::HostBuffers::HostBytes >, 11, false >
  hostbytes;
static const int kResizeFieldNumber = 3;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::HostBuffers::Instruction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::HostBuffers::ResizeMessage >, 11, false >
  resize;
static const int kEchoackFieldNumber = 7;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::HostBuffers::Instruction,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::HostBuffers::EchoAck >, 11, false >
  echoack;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HostMessage

// repeated .HostBuffers.Instruction instruction = 1;
inline int HostMessage::instruction_size() const {
  return instruction_.size();
}
inline void HostMessage::clear_instruction() {
  instruction_.Clear();
}
inline ::HostBuffers::Instruction* HostMessage::mutable_instruction(int index) {
  // @@protoc_insertion_point(field_mutable:HostBuffers.HostMessage.instruction)
  return instruction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HostBuffers::Instruction >*
HostMessage::mutable_instruction() {
  // @@protoc_insertion_point(field_mutable_list:HostBuffers.HostMessage.instruction)
  return &instruction_;
}
inline const ::HostBuffers::Instruction& HostMessage::instruction(int index) const {
  // @@protoc_insertion_point(field_get:HostBuffers.HostMessage.instruction)
  return instruction_.Get(index);
}
inline ::HostBuffers::Instruction* HostMessage::add_instruction() {
  // @@protoc_insertion_point(field_add:HostBuffers.HostMessage.instruction)
  return instruction_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HostBuffers::Instruction >&
HostMessage::instruction() const {
  // @@protoc_insertion_point(field_list:HostBuffers.HostMessage.instruction)
  return instruction_;
}

// -------------------------------------------------------------------

// Instruction

// -------------------------------------------------------------------

// HostBytes

// optional bytes hoststring = 4;
inline bool HostBytes::has_hoststring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HostBytes::clear_hoststring() {
  hoststring_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HostBytes::hoststring() const {
  // @@protoc_insertion_point(field_get:HostBuffers.HostBytes.hoststring)
  return hoststring_.GetNoArena();
}
inline void HostBytes::set_hoststring(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hoststring_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HostBuffers.HostBytes.hoststring)
}
inline void HostBytes::set_hoststring(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hoststring_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HostBuffers.HostBytes.hoststring)
}
inline void HostBytes::set_hoststring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hoststring_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HostBuffers.HostBytes.hoststring)
}
inline void HostBytes::set_hoststring(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hoststring_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HostBuffers.HostBytes.hoststring)
}
inline std::string* HostBytes::mutable_hoststring() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:HostBuffers.HostBytes.hoststring)
  return hoststring_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostBytes::release_hoststring() {
  // @@protoc_insertion_point(field_release:HostBuffers.HostBytes.hoststring)
  if (!has_hoststring()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hoststring_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostBytes::set_allocated_hoststring(std::string* hoststring) {
  if (hoststring != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hoststring_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hoststring);
  // @@protoc_insertion_point(field_set_allocated:HostBuffers.HostBytes.hoststring)
}

// -------------------------------------------------------------------

// ResizeMessage

// optional int32 width = 5;
inline bool ResizeMessage::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResizeMessage::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResizeMessage::width() const {
  // @@protoc_insertion_point(field_get:HostBuffers.ResizeMessage.width)
  return width_;
}
inline void ResizeMessage::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
  // @@protoc_insertion_point(field_set:HostBuffers.ResizeMessage.width)
}

// optional int32 height = 6;
inline bool ResizeMessage::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResizeMessage::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResizeMessage::height() const {
  // @@protoc_insertion_point(field_get:HostBuffers.ResizeMessage.height)
  return height_;
}
inline void ResizeMessage::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
  // @@protoc_insertion_point(field_set:HostBuffers.ResizeMessage.height)
}

// -------------------------------------------------------------------

// EchoAck

// optional uint64 echo_ack_num = 8;
inline bool EchoAck::has_echo_ack_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoAck::clear_echo_ack_num() {
  echo_ack_num_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EchoAck::echo_ack_num() const {
  // @@protoc_insertion_point(field_get:HostBuffers.EchoAck.echo_ack_num)
  return echo_ack_num_;
}
inline void EchoAck::set_echo_ack_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  echo_ack_num_ = value;
  // @@protoc_insertion_point(field_set:HostBuffers.EchoAck.echo_ack_num)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HostBuffers

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hostinput_2eproto
