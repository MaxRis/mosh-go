// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userinput.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "userinput.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace ClientBuffers {

void protobuf_ShutdownFile_userinput_2eproto() {
  delete UserMessage::default_instance_;
  delete Instruction::default_instance_;
  delete Keystroke::default_instance_;
  delete ResizeMessage::default_instance_;
}

void protobuf_AddDesc_userinput_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  UserMessage::default_instance_ = new UserMessage();
  Instruction::default_instance_ = new Instruction();
  Keystroke::default_instance_ = new Keystroke();
  ResizeMessage::default_instance_ = new ResizeMessage();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ClientBuffers::Instruction::default_instance(),
    2, 11, false, false,
    &::ClientBuffers::Keystroke::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ClientBuffers::Instruction::default_instance(),
    3, 11, false, false,
    &::ClientBuffers::ResizeMessage::default_instance());
  UserMessage::default_instance_->InitAsDefaultInstance();
  Instruction::default_instance_->InitAsDefaultInstance();
  Keystroke::default_instance_->InitAsDefaultInstance();
  ResizeMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_userinput_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_userinput_2eproto {
  StaticDescriptorInitializer_userinput_2eproto() {
    protobuf_AddDesc_userinput_2eproto();
  }
} static_descriptor_initializer_userinput_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UserMessage::kInstructionFieldNumber;
#endif  // !_MSC_VER

UserMessage::UserMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBuffers.UserMessage)
}

void UserMessage::InitAsDefaultInstance() {
}

UserMessage::UserMessage(const UserMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientBuffers.UserMessage)
}

void UserMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMessage::~UserMessage() {
  // @@protoc_insertion_point(destructor:ClientBuffers.UserMessage)
  SharedDtor();
}

void UserMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserMessage& UserMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinput_2eproto();
  return *default_instance_;
}

UserMessage* UserMessage::default_instance_ = NULL;

UserMessage* UserMessage::New() const {
  return new UserMessage;
}

void UserMessage::Clear() {
  instruction_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ClientBuffers.UserMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ClientBuffers.Instruction instruction = 1;
      case 1: {
        if (tag == 10) {
         parse_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instruction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_instruction;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBuffers.UserMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBuffers.UserMessage)
  return false;
#undef DO_
}

void UserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBuffers.UserMessage)
  // repeated .ClientBuffers.Instruction instruction = 1;
  for (int i = 0; i < this->instruction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->instruction(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ClientBuffers.UserMessage)
}

int UserMessage::ByteSize() const {
  int total_size = 0;

  // repeated .ClientBuffers.Instruction instruction = 1;
  total_size += 1 * this->instruction_size();
  for (int i = 0; i < this->instruction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instruction(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserMessage*>(&from));
}

void UserMessage::MergeFrom(const UserMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  instruction_.MergeFrom(from.instruction_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserMessage::CopyFrom(const UserMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMessage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->instruction())) return false;
  return true;
}

void UserMessage::Swap(UserMessage* other) {
  if (other != this) {
    instruction_.Swap(&other->instruction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserMessage::GetTypeName() const {
  return "ClientBuffers.UserMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Instruction::Instruction()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBuffers.Instruction)
}

void Instruction::InitAsDefaultInstance() {
}

Instruction::Instruction(const Instruction& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientBuffers.Instruction)
}

void Instruction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Instruction::~Instruction() {
  // @@protoc_insertion_point(destructor:ClientBuffers.Instruction)
  SharedDtor();
}

void Instruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Instruction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Instruction& Instruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinput_2eproto();
  return *default_instance_;
}

Instruction* Instruction::default_instance_ = NULL;

Instruction* Instruction::New() const {
  return new Instruction;
}

void Instruction::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Instruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ClientBuffers.Instruction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    if ((16u <= tag)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_,
                                  &unknown_fields_stream));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBuffers.Instruction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBuffers.Instruction)
  return false;
#undef DO_
}

void Instruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBuffers.Instruction)
  // Extension range [2, 536870912)
  _extensions_.SerializeWithCachedSizes(
      2, 536870912, output);

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ClientBuffers.Instruction)
}

int Instruction::ByteSize() const {
  int total_size = 0;

  total_size += _extensions_.ByteSize();

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instruction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Instruction*>(&from));
}

void Instruction::MergeFrom(const Instruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Instruction::CopyFrom(const Instruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instruction::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Instruction::Swap(Instruction* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string Instruction::GetTypeName() const {
  return "ClientBuffers.Instruction";
}


// ===================================================================

#ifndef _MSC_VER
const int Keystroke::kKeysFieldNumber;
#endif  // !_MSC_VER

Keystroke::Keystroke()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBuffers.Keystroke)
}

void Keystroke::InitAsDefaultInstance() {
}

Keystroke::Keystroke(const Keystroke& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientBuffers.Keystroke)
}

void Keystroke::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  keys_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Keystroke::~Keystroke() {
  // @@protoc_insertion_point(destructor:ClientBuffers.Keystroke)
  SharedDtor();
}

void Keystroke::SharedDtor() {
  if (keys_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keys_;
  }
  if (this != default_instance_) {
  }
}

void Keystroke::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Keystroke& Keystroke::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinput_2eproto();
  return *default_instance_;
}

Keystroke* Keystroke::default_instance_ = NULL;

Keystroke* Keystroke::New() const {
  return new Keystroke;
}

void Keystroke::Clear() {
  if (has_keys()) {
    if (keys_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      keys_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Keystroke::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ClientBuffers.Keystroke)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes keys = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBuffers.Keystroke)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBuffers.Keystroke)
  return false;
#undef DO_
}

void Keystroke::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBuffers.Keystroke)
  // optional bytes keys = 4;
  if (has_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->keys(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ClientBuffers.Keystroke)
}

int Keystroke::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes keys = 4;
    if (has_keys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->keys());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Keystroke::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Keystroke*>(&from));
}

void Keystroke::MergeFrom(const Keystroke& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keys()) {
      set_keys(from.keys());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Keystroke::CopyFrom(const Keystroke& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Keystroke::IsInitialized() const {

  return true;
}

void Keystroke::Swap(Keystroke* other) {
  if (other != this) {
    std::swap(keys_, other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Keystroke::GetTypeName() const {
  return "ClientBuffers.Keystroke";
}


// ===================================================================

#ifndef _MSC_VER
const int ResizeMessage::kWidthFieldNumber;
const int ResizeMessage::kHeightFieldNumber;
#endif  // !_MSC_VER

ResizeMessage::ResizeMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientBuffers.ResizeMessage)
}

void ResizeMessage::InitAsDefaultInstance() {
}

ResizeMessage::ResizeMessage(const ResizeMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientBuffers.ResizeMessage)
}

void ResizeMessage::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResizeMessage::~ResizeMessage() {
  // @@protoc_insertion_point(destructor:ClientBuffers.ResizeMessage)
  SharedDtor();
}

void ResizeMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResizeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResizeMessage& ResizeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userinput_2eproto();
  return *default_instance_;
}

ResizeMessage* ResizeMessage::default_instance_ = NULL;

ResizeMessage* ResizeMessage::New() const {
  return new ResizeMessage;
}

void ResizeMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResizeMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(width_, height_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ResizeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ClientBuffers.ResizeMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 5;
      case 5: {
        if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_height;
        break;
      }

      // optional int32 height = 6;
      case 6: {
        if (tag == 48) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientBuffers.ResizeMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientBuffers.ResizeMessage)
  return false;
#undef DO_
}

void ResizeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientBuffers.ResizeMessage)
  // optional int32 width = 5;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->width(), output);
  }

  // optional int32 height = 6;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->height(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ClientBuffers.ResizeMessage)
}

int ResizeMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 6;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResizeMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResizeMessage*>(&from));
}

void ResizeMessage::MergeFrom(const ResizeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ResizeMessage::CopyFrom(const ResizeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeMessage::IsInitialized() const {

  return true;
}

void ResizeMessage::Swap(ResizeMessage* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResizeMessage::GetTypeName() const {
  return "ClientBuffers.ResizeMessage";
}

::google::protobuf::internal::ExtensionIdentifier< ::ClientBuffers::Instruction,
    ::google::protobuf::internal::MessageTypeTraits< ::ClientBuffers::Keystroke >, 11, false >
  keystroke(kKeystrokeFieldNumber, ::ClientBuffers::Keystroke::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::ClientBuffers::Instruction,
    ::google::protobuf::internal::MessageTypeTraits< ::ClientBuffers::ResizeMessage >, 11, false >
  resize(kResizeFieldNumber, ::ClientBuffers::ResizeMessage::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace ClientBuffers

// @@protoc_insertion_point(global_scope)
